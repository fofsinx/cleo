(()=>{"use strict";var e={27:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=async function(e){e.get("/api/queues",(async(e,t)=>{try{const e=n.cleo.getQueueManager(),r=await Promise.all([e.getTask("*","default")]);return o.logger.info("File: queues.ts 📋, Line: 13, Function: GET /api/queues;",{tasksCount:r.length}),t.send({tasks:r})}catch(e){return o.logger.error("File: queues.ts ❌, Line: 19, Function: GET /api/queues;",{error:e}),t.status(500).send({error:"Failed to fetch tasks"})}})),e.post("/api/queues",(async(e,t)=>{try{const{name:r,data:s,options:a}=e.body,i=n.cleo.getQueueManager(),u=await i.addTask(r,s,a);return o.logger.info("File: queues.ts ➕, Line: 31, Function: POST /api/queues;",{taskId:u.id,taskName:u.name}),t.send(u)}catch(e){return o.logger.error("File: queues.ts ❌, Line: 38, Function: POST /api/queues;",{error:e}),t.status(500).send({error:"Failed to create task"})}})),e.delete("/api/queues/:taskId",(async(e,t)=>{try{const{taskId:r}=e.params,s=n.cleo.getQueueManager();return await s.removeTask(r)?(o.logger.info("File: queues.ts 🗑️, Line: 51, Function: DELETE /api/queues/:taskId;",{taskId:r}),t.send({message:"Task removed successfully"})):(o.logger.warn("File: queues.ts ⚠️, Line: 55, Function: DELETE /api/queues/:taskId;",{taskId:r,message:"Task not found"}),t.status(404).send({error:"Task not found"}))}catch(e){return o.logger.error("File: queues.ts ❌, Line: 62, Function: DELETE /api/queues/:taskId;",{error:e}),t.status(500).send({error:"Failed to remove task"})}}))};const n=r(783),o=r(749)},89:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createServer=i,t.startServer=u;const o=n(r(446)),s=r(749),a=n(r(27));async function i(){const e=(0,o.default)({logger:!1});return await e.register(a.default),e.setErrorHandler(((e,t,r)=>{s.logger.error("File: server.ts ❌, Line: 14, Function: errorHandler;",{error:e,path:t.url,method:t.method}),r.status(500).send({error:"Internal Server Error"})})),e.setNotFoundHandler(((e,t)=>{s.logger.warn("File: server.ts ⚠️, Line: 24, Function: notFoundHandler;",{path:e.url,method:e.method}),t.status(404).send({error:"Route not found"})})),e}async function u(e=3001){try{const t=await i();await t.listen({port:e,host:"0.0.0.0"}),s.logger.info("File: server.ts 🚀, Line: 39, Function: startServer;",{message:`Server listening on port ${e}`})}catch(e){s.logger.error("File: server.ts ❌, Line: 43, Function: startServer;",{error:e,message:"Failed to start server"}),process.exit(1)}}u()},481:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.redisConnection=void 0,t.getRedisConfig=a;const n=r(749),o=6379,s="localhost";function a(){const{REDIS_HOST:e=s,REDIS_PORT:t=o,REDIS_PASSWORD:r,REDIS_TLS:a,REDIS_DB:i}=process.env;return n.logger.info("File: redis.ts 🔌, Line: 15, Function: getRedisConfig;",{host:e,port:t,tls:"true"===a,db:i}),{host:e,port:Number(t),password:r,tls:"true"===a?{}:void 0,db:i?Number(i):void 0}}t.redisConnection=a()},361:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.task=function(e={}){return function(t,r,a){a.value;const i=e.name||r;return a.value=async function(...t){o.logger.info("File: task.ts 🎯, Line: 20, Function: task decorator;",{taskName:i,args:t});const r={id:e.id,priority:e.priority,maxRetries:e.maxRetries,retryDelay:e.retryDelay,timeout:e.timeout,schedule:e.schedule,queue:e.queue};try{const e=s.cleo.getQueueManager(),a=await e.addTask(i,t[0],r);return o.logger.info("File: task.ts ✅, Line: 40, Function: task decorator;",{taskId:a.id,taskName:i,state:n.TaskState.PENDING}),a}catch(e){throw o.logger.error("File: task.ts ❌, Line: 48, Function: task decorator;",{taskName:i,error:e}),e}},a}};const n=r(815),o=r(749),s=r(783)},783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Worker=t.redisConnection=t.LogLevel=t.TaskPriority=t.TaskState=t.cleo=void 0;const n=r(361),o=r(433),s=r(587);Object.defineProperty(t,"Worker",{enumerable:!0,get:function(){return s.Worker}});const a=r(815);Object.defineProperty(t,"TaskState",{enumerable:!0,get:function(){return a.TaskState}}),Object.defineProperty(t,"TaskPriority",{enumerable:!0,get:function(){return a.TaskPriority}}),Object.defineProperty(t,"LogLevel",{enumerable:!0,get:function(){return a.LogLevel}});const i=r(749),u=r(481);Object.defineProperty(t,"redisConnection",{enumerable:!0,get:function(){return u.redisConnection}});class l{static instance;queueManager;worker=null;isConfigured=!1;constructor(){i.logger.info("File: index.ts 📦, Line: 15, Function: constructor; Initializing Cleo instance"),this.queueManager=new o.QueueManager("default")}static getInstance(){return l.instance||(i.logger.info("File: index.ts 🔄, Line: 22, Function: getInstance; Creating new Cleo instance"),l.instance=new l),l.instance}configure(e){try{if(i.logger.info("File: index.ts ⚙️, Line: 36, Function: configure; Configuring Cleo with redis settings",{host:e.redis.host,port:e.redis.port}),!e.redis.host||!e.redis.port)throw new Error("Redis host and port are required");process.env.REDIS_HOST=e.redis.host,process.env.REDIS_PORT=e.redis.port.toString(),e.redis.password&&(process.env.REDIS_PASSWORD=e.redis.password),e.redis.tls&&(process.env.REDIS_TLS="true"),e.redis.db&&(process.env.REDIS_DB=e.redis.db.toString()),e.worker&&(i.logger.info("File: index.ts 👷, Line: 51, Function: configure; Initializing worker"),this.worker=new s.Worker("default",e.worker)),this.isConfigured=!0,i.logger.info("File: index.ts ✅, Line: 56, Function: configure; Cleo configuration complete")}catch(e){throw i.logger.error("File: index.ts ❌, Line: 58, Function: configure; Configuration failed",{error:e}),e}}getQueueManager(){if(!this.isConfigured)throw i.logger.error("File: index.ts ⚠️, Line: 64, Function: getQueueManager; Cleo must be configured before using"),new Error("Cleo must be configured before using");return this.queueManager}getWorker(){return this.worker}task=n.task}const c=l.getInstance();t.cleo=c},433:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.QueueManager=void 0;const n=r(377),o=r(815),s=r(749),a=r(481);t.QueueManager=class{queues;constructor(e){s.logger.info("File: queueManager.ts 🎯, Line: 9, Function: constructor;",{defaultQueueName:e}),this.queues=new Map,this.queues.set(e,new n.Queue(e,{connection:a.redisConnection}))}async addTask(e,t,r={}){const i=r.queue||"default";let u=this.queues.get(i);u||(s.logger.info("File: queueManager.ts 🆕, Line: 23, Function: addTask;",{queueName:i,message:"Creating new queue"}),u=new n.Queue(i,{connection:a.redisConnection}),this.queues.set(i,u));const l={id:r.id||`${e}-${Date.now()}`,name:e,data:t,options:r,state:o.TaskState.PENDING,retryCount:0,createdAt:new Date,updatedAt:new Date};s.logger.info("File: queueManager.ts ➕, Line: 42, Function: addTask;",{taskId:l.id,taskName:l.name,queueName:i});const c={priority:r.priority,attempts:r.maxRetries,backoff:{type:"exponential",delay:r.retryDelay||1e3},removeOnComplete:r.timeout?{age:r.timeout,count:1e3}:void 0,repeat:r.schedule?{pattern:r.schedule}:void 0};return await u.add(e,l,c),l}async getTask(e,t="default"){const r=this.queues.get(t);if(!r)return s.logger.error("File: queueManager.ts ❌, Line: 65, Function: getTask;",{queueName:t,message:"Queue not found"}),null;const n=await r.getJob(e);return n?n.data:(s.logger.warn("File: queueManager.ts ⚠️, Line: 73, Function: getTask;",{taskId:e,queueName:t,message:"Task not found"}),null)}async removeTask(e,t="default"){const r=this.queues.get(t);if(!r)return s.logger.error("File: queueManager.ts ❌, Line: 87, Function: removeTask;",{queueName:t,message:"Queue not found"}),!1;const n=await r.getJob(e);return n?(await n.remove(),s.logger.info("File: queueManager.ts 🗑️, Line: 103, Function: removeTask;",{taskId:e,queueName:t,message:"Task removed"}),!0):(s.logger.warn("File: queueManager.ts ⚠️, Line: 95, Function: removeTask;",{taskId:e,queueName:t,message:"Task not found"}),!1)}async close(){s.logger.info("File: queueManager.ts 🔒, Line: 112, Function: close;",{message:"Closing all queues"});const e=Array.from(this.queues.values()).map((e=>e.close()));await Promise.all(e),this.queues.clear()}}},815:(e,t)=>{var r,n,o,s,a;Object.defineProperty(t,"__esModule",{value:!0}),t.QueueEvent=t.WorkerState=t.LogLevel=t.TaskPriority=t.TaskState=void 0,function(e){e.PENDING="PENDING",e.RUNNING="RUNNING",e.SUCCESS="SUCCESS",e.FAILURE="FAILURE",e.RETRY="RETRY",e.SCHEDULED="SCHEDULED",e.CANCELLED="CANCELLED"}(r||(t.TaskState=r={})),function(e){e[e.LOW=1]="LOW",e[e.NORMAL=2]="NORMAL",e[e.HIGH=3]="HIGH",e[e.CRITICAL=4]="CRITICAL"}(n||(t.TaskPriority=n={})),function(e){e.ERROR="error",e.WARN="warn",e.INFO="info",e.DEBUG="debug"}(o||(t.LogLevel=o={})),function(e){e.IDLE="IDLE",e.BUSY="BUSY",e.STOPPED="STOPPED",e.ERROR="ERROR"}(s||(t.WorkerState=s={})),function(e){e.TASK_ADDED="TASK_ADDED",e.TASK_STARTED="TASK_STARTED",e.TASK_COMPLETED="TASK_COMPLETED",e.TASK_FAILED="TASK_FAILED",e.TASK_RETRYING="TASK_RETRYING",e.WORKER_CONNECTED="WORKER_CONNECTED",e.WORKER_DISCONNECTED="WORKER_DISCONNECTED"}(a||(t.QueueEvent=a={}))},749:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.logger=void 0,t.log=function(e,t,r){i.log(e,t,r)};const o=n(r(306)),s=r(815),a=o.default.format.combine(o.default.format.timestamp(),o.default.format.json(),o.default.format.printf((({timestamp:e,level:t,message:r,...n})=>{const o=Object.keys(n).length?JSON.stringify(n):"";return`${e} [${t.toUpperCase()}]: ${r} ${o}`}))),i=o.default.createLogger({level:process.env.LOG_LEVEL||s.LogLevel.INFO,format:a,transports:[new o.default.transports.Console({format:o.default.format.colorize({all:!0})}),new o.default.transports.File({filename:"logs/error.log",level:s.LogLevel.ERROR}),new o.default.transports.File({filename:"logs/combined.log"})]});t.logger=i,i.requestTracker=(e,t,r)=>{const n=Date.now();t.on("finish",(()=>{const r=Date.now()-n;i.info("File: logger.ts 🌐, Line: 33, Function: requestTracker;",{method:e.method,url:e.url,status:t.statusCode,duration:`${r}ms`})})),r()}},587:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Worker=void 0;const n=r(377),o=r(853),s=r(815),a=r(749),i=r(481);t.Worker=class{worker;registry;state=s.WorkerState.IDLE;constructor(e,t){a.logger.info("File: worker.ts 🚀, Line: 14, Function: constructor;",{queueName:e,config:t}),this.registry=new o.TaskRegistry,this.worker=new n.Worker(e,this.processTask.bind(this),{connection:i.redisConnection,concurrency:t.concurrency||1}),this.setupEventHandlers()}setupEventHandlers(){this.worker.on("completed",(e=>{e&&a.logger.info("File: worker.ts ✅, Line: 29, Function: setupEventHandlers;",{jobId:e.id,state:s.TaskState.SUCCESS})})),this.worker.on("failed",((e,t)=>{a.logger.error("File: worker.ts ❌, Line: 36, Function: setupEventHandlers;",{jobId:e?.id,error:t,state:s.TaskState.FAILURE})})),this.worker.on("error",(e=>{a.logger.error("File: worker.ts 💥, Line: 44, Function: setupEventHandlers;",{error:e,state:s.WorkerState.ERROR}),this.state=s.WorkerState.ERROR}))}async processTask(e){try{a.logger.info("File: worker.ts 🔄, Line: 54, Function: processTask;",{jobId:e.id,state:s.TaskState.RUNNING}),this.state=s.WorkerState.BUSY;const t=e.data,r=this.registry.getTaskHandler(t.name);if(!r)throw new Error(`No handler registered for task: ${t.name}`);const n=await r(t.data);return this.state=s.WorkerState.IDLE,a.logger.info("File: worker.ts ✅, Line: 69, Function: processTask;",{jobId:e.id,taskName:t.name,result:n}),n}catch(t){throw this.state=s.WorkerState.ERROR,a.logger.error("File: worker.ts ❌, Line: 78, Function: processTask;",{jobId:e.id,error:t}),t}}registerTask(e,t){this.registry.registerTask(e,t)}getState(){return this.state}async close(){a.logger.info("File: worker.ts 🔒, Line: 90, Function: close;",{state:s.WorkerState.STOPPED}),this.state=s.WorkerState.STOPPED,await this.worker.close()}}},853:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TaskRegistry=void 0;const n=r(749);t.TaskRegistry=class{tasks;constructor(){this.tasks=new Map,n.logger.info("File: taskRegistry.ts 📝, Line: 8, Function: constructor;",{message:"Task registry initialized"})}registerTask(e,t){n.logger.info("File: taskRegistry.ts ➕, Line: 15, Function: registerTask;",{taskName:e}),this.tasks.set(e,t)}getTaskHandler(e){const t=this.tasks.get(e);return t||n.logger.warn("File: taskRegistry.ts ⚠️, Line: 24, Function: getTaskHandler;",{taskName:e,message:"Task handler not found"}),t}async execute(e){const t=this.getTaskHandler(e.name);if(!t){const t=`No handler registered for task: ${e.name}`;throw n.logger.error("File: taskRegistry.ts ❌, Line: 35, Function: execute;",{taskName:e.name,error:t}),new Error(t)}try{n.logger.info("File: taskRegistry.ts 🔄, Line: 43, Function: execute;",{taskName:e.name,taskId:e.id});const r=await t(e.data);return n.logger.info("File: taskRegistry.ts ✅, Line: 50, Function: execute;",{taskName:e.name,taskId:e.id,result:r}),r}catch(t){throw n.logger.error("File: taskRegistry.ts ❌, Line: 58, Function: execute;",{taskName:e.name,taskId:e.id,error:t}),t}}}},377:e=>{e.exports=require("bullmq")},446:e=>{e.exports=require("fastify")},306:e=>{e.exports=require("winston")}},t={},r=function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(89);module.exports=r})();