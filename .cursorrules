Project name: cleo
Description: Design and implement a distributed task queue system in Node.js that allows background job processing, similar to Celery in Python. The system should support the following features:

Core Requirements:

Task Queuing:

Allow tasks to be added to a queue asynchronously by various producers.

Ensure tasks can handle high-volume workloads.

Task Workers:

Implement workers that pick up and execute tasks from the queue.

Support concurrency to allow multiple tasks to run simultaneously.

Message Broker Integration:

Use a message broker (e.g., Redis, RabbitMQ, or Kafka) for communication between producers and workers.

Ensure tasks are durable and persist in case of failures.

Retry Mechanism:

Automatically retry tasks on failure, with exponential backoff and a configurable retry limit.

Task Scheduling:

Support scheduled tasks and periodic tasks with cron-like syntax.

Task States:

Implement task state tracking (e.g., PENDING, SUCCESS, FAILURE).

Provide a way to query the state of tasks.

Scalability:

Ensure the system can scale horizontally by adding more workers.

Ease of Use:

Provide a simple API for defining and enqueuing tasks.

Allow developers to easily customize worker behavior and task configuration.

Optional Enhancements:

Web Dashboard:

Build a dashboard to monitor queues, task states, and worker status.

Prioritized Queues:

Allow tasks to be assigned priority levels, enabling workers to process high-priority tasks first.

Delayed Execution:

Enable tasks to be scheduled for future execution.

Extensibility:

Support plugins or middleware for additional features, such as logging or metrics collection.

Technical Stack (Suggestions):

Node.js Framework: Use Fastify for API interactions (optional for the web interface).

Message Broker: Use redis (via ioredis or bullmq) or amqplib for RabbitMQ.

Task storage: redis (via ioredis or bullmq)

Libraries:

Concurrency: Use worker_threads or cluster.

Scheduling: Use node-cron or similar.

Deliverables:

A Node.js library or application that provides the described task queue functionality.

Documentation with usage examples for both producers and workers.

A demo application showcasing task production, execution, and monitoring.